@inject AddComponentState<AddPassword> PasswordComponentState
@inject IJSRuntime JsRuntime
@implements IDisposable

<div class="z-40 bg-black/75 backdrop-blur-sm fixed inset-0 transition-all duration-300 grid lg:grid-cols-wide-screen @(PasswordComponentState.IsComponentOpen ? "visible" : "invisible")">
    <div @onclick="() => PasswordComponentState.SetComponentOpen(false)" class="hidden lg:block"></div>
    <div class="grid grid-cols-1 sm:grid-cols-2 h-full">
        <div @onclick="() => PasswordComponentState.SetComponentOpen(false)" class="hidden sm:block"></div>
        <div class="bg-skin-fill_secondary w-full text-white px-4 duration-500 translate-x-0 transition-all @(PasswordComponentState.IsComponentOpen ? "translate-x-0" : "translate-x-full")">
            <header class="h-14 flex justify-between items-center">
                <button @onclick="() => PasswordComponentState.SetComponentOpen(false)" class="p-2 text-skin-password aspect-square rounded-full bg-skin-password_muted flex justify-center items-center">
                    <svg class="p-0.5 w-5 aspect-square" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256">
                        <rect width="256" height="256" fill="none"/><line x1="200" y1="56" x2="56" y2="200" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><line x1="200" y1="200" x2="56" y2="56" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/>
                    </svg>
                </button>
                <div class="flex gap-1">
                    <button
                        @onclick="async () => { await CopyToClipboard(_generatedPassword); PasswordComponentState.SetComponentOpen(false); }"
                        class="px-3 py-2 text-sm rounded-full bg-skin-password">
                        Copy and Close
                    </button>
                    <button
                        @onclick="GeneratePassword"
                        class="h-10 p-2 text-skin-password aspect-square rounded-full bg-skin-password_muted flex justify-center items-center">
                        <svg
                            class="w-5 aspect-square"
                            fill="currentColor"
                            xmlns="http://www.w3.org/2000/svg" viewBox="0 0 256 256">
                            <rect width="256" height="256" fill="none"/><path d="M64,64s24-24,64-24c56,0,88,56,88,56" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><path d="M192,192s-24,24-64,24c-56,0-88-56-88-56" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><polyline points="168 96 216 96 216 48" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/><polyline points="88 160 40 160 40 208" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="16"/>
                        </svg>
                    </button>
                </div>
            </header>
            <div class="flex flex-col gap-2 *:flex *:flex-col *:px-4 *:py-3 ">
                <div class="flex justify-center items-center min-h-28">
                    <span class="text-xl">@_generatedPassword</span>
                </div>
                <div class="divide-y divide-skin-border grid grid-cols-1 text-sm *:flex *:justify-between *:items-center">
                    <div class="gap-4">
                        <label class="py-3">@_passwordLength characters</label>
                        <input type="range" step="1" @bind="_passwordLength" @bind:event="oninput" @bind:after="GeneratePassword" min="8" max="64" class="range grow h-1 accent-white rounded-full bg-skin-password_muted"/>
                    </div>
                    <div>
                        <label class="py-3 grow cursor-pointer" for="password-special-chars">Special characters (!&*)</label>
                        <label class="inline-flex items-center cursor-pointer" for="password-special-chars">
                            <input type="checkbox" class="sr-only peer" id="password-special-chars" @bind="_includeSpecialCharacters" @bind:after="GeneratePassword">
                            <div class="relative w-11 h-6 bg-skin-password_muted peer-checked:bg-skin-password peer-focus:outline-none rounded-full peer-checked:after:translate-x-full peer-checked:after:border-white after:absolute after:top-[2px] after:start-[2px] after:bg-zinc-700 peer-checked:after:bg-white after:border-zinc-700 after:border after:rounded-full after:h-5 after:w-5 after:transition-all "></div>
                        </label>
                    </div>
                    <div>
                        <label class="py-3 grow cursor-pointer" for="password-uppercase">Capital letters (A-Z)</label>
                        <label class="inline-flex items-center cursor-pointer">
                            <input type="checkbox" class="sr-only peer" id="password-uppercase" @bind="_includeCapitalLetters" @bind:after="GeneratePassword">
                            <div class="relative w-11 h-6 bg-skin-password_muted peer-checked:bg-skin-password peer-focus:outline-none rounded-full peer-checked:after:translate-x-full peer-checked:after:border-white after:absolute after:top-[2px] after:start-[2px] after:bg-zinc-700 peer-checked:after:bg-white after:border-zinc-700 after:border after:rounded-full after:h-5 after:w-5 after:transition-all "></div>
                        </label>
                    </div>
                    <div>
                        <label class="py-3 grow cursor-pointer" for="password-digits">Include numbers (0-9)</label>
                        <label class="inline-flex items-center cursor-pointer">
                            <input type="checkbox" class="sr-only peer" id="password-digits" @bind="_includeNumbers" @bind:after="GeneratePassword">
                            <div class="relative w-11 h-6 bg-skin-password_muted peer-checked:bg-skin-password peer-focus:outline-none rounded-full peer-checked:after:translate-x-full peer-checked:after:border-white after:absolute after:top-[2px] after:start-[2px] after:bg-zinc-700 peer-checked:after:bg-white after:border-zinc-700 after:border after:rounded-full after:h-5 after:w-5 after:transition-all "></div>
                        </label>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script lang="js">
    (function() {
        const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;

        if (!isFirefox) {
            const input = document.querySelector(".range");

            function setBackgroundSize(input) {
                input.style.setProperty("--background-size", `${getBackgroundSize(input)}%`);
            }

            setBackgroundSize(input);

            input.addEventListener("input", () => setBackgroundSize(input));

            function getBackgroundSize(input) {
                const min = +input.min || 0;
                const max = +input.max || 100;
                const value = +input.value;

                const size = (value - min) / (max - min) * 100;

                return size;
            }
        }
    })();
</script>

@code {

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            GeneratePassword();
        }

        return Task.CompletedTask;
    }

    int _passwordLength = 12;
    bool _includeSpecialCharacters = true;
    bool _includeCapitalLetters = true;
    bool _includeNumbers = true;
    string _generatedPassword = "";

    void GeneratePassword()
    {
        _generatedPassword = PasswordGenerator.GeneratePassword(_passwordLength, _includeSpecialCharacters, _includeCapitalLetters, _includeNumbers);
    }

    async Task CopyToClipboard(string text)
    {
        await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);
    }

    protected override void OnInitialized()
    {
        PasswordComponentState.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        PasswordComponentState.OnChange -= StateHasChanged;
    }

}